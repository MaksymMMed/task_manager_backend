// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TodoBackendDAL;

#nullable disable

namespace TodoBackendDAL.Migrations
{
    [DbContext(typeof(ToDoContext))]
    [Migration("20230215195037_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TodoBackendDAL.Entities.InnerToDo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ToDoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ToDoId");

                    b.ToTable("InnerToDoTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2023, 2, 15, 10, 20, 37, 388, DateTimeKind.Local).AddTicks(6722),
                            IsComplete = true,
                            Name = "Do english",
                            ToDoId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2023, 2, 15, 10, 14, 37, 388, DateTimeKind.Local).AddTicks(6741),
                            IsComplete = false,
                            Name = "Do math",
                            ToDoId = 1
                        });
                });

            modelBuilder.Entity("TodoBackendDAL.Entities.ToDo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CollectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.ToTable("ToDoTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Do math and english",
                            CollectionId = 4,
                            CreationDate = new DateTime(2023, 2, 15, 9, 50, 37, 388, DateTimeKind.Local).AddTicks(5693),
                            IsComplete = false,
                            Name = "Do homework"
                        },
                        new
                        {
                            Id = 2,
                            About = "Do history",
                            CollectionId = 4,
                            CreationDate = new DateTime(2023, 2, 14, 9, 50, 37, 388, DateTimeKind.Local).AddTicks(5750),
                            IsComplete = true,
                            Name = "Do homework"
                        },
                        new
                        {
                            Id = 3,
                            About = "Bake chiken and potato ",
                            CollectionId = 3,
                            CreationDate = new DateTime(2023, 2, 15, 19, 50, 37, 388, DateTimeKind.Local).AddTicks(5756),
                            IsComplete = false,
                            Name = "Cook supper"
                        },
                        new
                        {
                            Id = 4,
                            About = "-",
                            CollectionId = 3,
                            CreationDate = new DateTime(2023, 2, 15, 9, 50, 37, 388, DateTimeKind.Local).AddTicks(5760),
                            IsComplete = false,
                            Name = "Clean up home"
                        },
                        new
                        {
                            Id = 5,
                            About = "Go on training at next tuesday",
                            CollectionId = 2,
                            CreationDate = new DateTime(2023, 2, 15, 20, 50, 37, 388, DateTimeKind.Local).AddTicks(5764),
                            IsComplete = false,
                            Name = "Training"
                        });
                });

            modelBuilder.Entity("TodoBackendDAL.Entities.ToDoCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IconColor")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("IconType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ToDoCollectionTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IconColor = "Red",
                            IconType = "Home",
                            Name = "Home",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            IconColor = "Red",
                            IconType = "Home",
                            Name = "Sport",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            IconColor = "Red",
                            IconType = "Home",
                            Name = "Home",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            IconColor = "Red",
                            IconType = "Home",
                            Name = "Learn",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("TodoBackendDAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("UserTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Bender03@gmail.com",
                            Login = "BenderRobot",
                            Password = "qwerty01"
                        },
                        new
                        {
                            Id = 2,
                            Email = "JackD@gmail.com",
                            Login = "Jack",
                            Password = "qwerty02"
                        });
                });

            modelBuilder.Entity("TodoBackendDAL.Entities.InnerToDo", b =>
                {
                    b.HasOne("TodoBackendDAL.Entities.ToDo", "ParentToDo")
                        .WithMany("InnerToDoList")
                        .HasForeignKey("ToDoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentToDo");
                });

            modelBuilder.Entity("TodoBackendDAL.Entities.ToDo", b =>
                {
                    b.HasOne("TodoBackendDAL.Entities.ToDoCollection", "Collection")
                        .WithMany("ToDoList")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("TodoBackendDAL.Entities.ToDoCollection", b =>
                {
                    b.HasOne("TodoBackendDAL.Entities.User", "User")
                        .WithMany("Collections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TodoBackendDAL.Entities.ToDo", b =>
                {
                    b.Navigation("InnerToDoList");
                });

            modelBuilder.Entity("TodoBackendDAL.Entities.ToDoCollection", b =>
                {
                    b.Navigation("ToDoList");
                });

            modelBuilder.Entity("TodoBackendDAL.Entities.User", b =>
                {
                    b.Navigation("Collections");
                });
#pragma warning restore 612, 618
        }
    }
}
